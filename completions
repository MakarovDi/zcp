#####################################################################
##         ZSH Config Pack by Dmitry Makarov (aka Loki)            ##
#####################################################################
##                      Completion system                          ##
##                         Version 0.2                             ##
#####################################################################
##             Absolutly free to use/modification                  ##
#####################################################################
## History ('*' = fix, '+' = new feature, '-' = deprecated)        ##
##-----------------------------------------------------------------##
## Version 0.1 - [09.03.2014]                                      ##
##   + first version                                               ##
##                                                                 ## 
## Version 0.2 - [15.03.2014]                                      ##
##   + command not found handles with pkginfo                      ## 
##                                                                 ## 
#####################################################################

# load completion system
autoload -U compinit && compinit -d ${ZSHDIR}/.zcompdump

# allow two errors for word typed in approximate completer
zstyle ':completion:*:approximate:'    max-errors 2 numeric

# don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '(aptitude-*|*\~)'

# start menu completion only if it could find no unambiguous initial string
zstyle ':completion:*:correct:*'       insert-unambiguous true
zstyle ':completion:*:corrections'     format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
zstyle ':completion:*:correct:*'       original true

# activate color-completion
zstyle ':completion:*:default'         list-colors ${(s.:.)LS_COLORS}

# format on completion
zstyle ':completion:*:descriptions'    format $'%{\e[0;31m%}completing %B%d%b%{\e[0m%}'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*'        tag-order all-expansions

# activate menu
zstyle ':completion:*:history-words'   list false
zstyle ':completion:*:history-words'   menu yes

# ignore duplicate entries
zstyle ':completion:*:history-words'   remove-all-dups yes
zstyle ':completion:*:history-words'   stop yes

# match uppercase from lowercase
zstyle ':completion:*'                 matcher-list 'm:{a-z}={A-Z}'

# separate matches into groups
zstyle ':completion:*:matches'         group 'yes'
zstyle ':completion:*'                 group-name ''

# if there are more than 5 options allow selecting from a menu
zstyle ':completion:*'                 menu select=5

zstyle ':completion:*:messages'        format '%d'
zstyle ':completion:*:options'         auto-description '%d'

# describe options in full
zstyle ':completion:*:options'         description 'yes'

# on processes completion complete all user processes
zstyle ':completion:*:processes'       command 'ps -au$USER'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# provide verbose completion information
zstyle ':completion:*'                 verbose true

# recent (as of Dec 2007) zsh versions are able to provide descriptions
# for commands (read: 1st word in the line) that it will list for the user
# to choose from. The following disables that, because it's not exactly fast.
zstyle ':completion:*:-command-:*:'    verbose false

# set format for warnings
zstyle ':completion:*:warnings'        format $'%{\e[0;31m%}No matches for:%{\e[0m%} %d'

# define files to ignore for zcompile
zstyle ':completion:*:*:zcompile:*'    ignored-patterns '(*~|*.zwc)'
zstyle ':completion:correct:'          prompt 'correct to: %e'

# Ignore completion functions for commands you don't have: 
zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'
zstyle ':completion:*:functions'                  ignored-patterns '_*'  

# Provide more processes in completion of programs like killall:
zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

# complete manual by their section
zstyle ':completion:*:manuals'    separate-sections true
zstyle ':completion:*:manuals.*'  insert-sections   true
zstyle ':completion:*:man:*'      menu yes select

# Search path for sudo completion
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                           /usr/local/bin  \
                                           /usr/sbin       \
                                           /usr/bin        \
                                           /sbin           \
                                           /bin            \
                                           /usr/X11R6/bin

# provide .. as a completion
zstyle ':completion:*' special-dirs ..

# run rehash on completion so new installed program are found automatically:
_force_rehash() {
     (( CURRENT == 1 )) && rehash
     return 1
}

# set completion functions and it's order
setopt correct
zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _correct _approximate _files

# command for process lists, the local web server details and host completion
zstyle ':completion:*:urls' local 'www' '/var/www/' 'public_html'

# caching
[[ -e ${ZSHDIR}/cache ]] || mkdir ${ZSHDIR}/cache
zstyle ':completion:*' use-cache yes 
zstyle ':completion::complete:*' cache-path ${ZSHDIR}/cache/

# host completion
[[ -r ~/.ssh/known_hosts ]] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[[ -r /etc/hosts ]] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()

hosts=(
    $(hostname)
   "$_ssh_hosts[@]"
   "$_etc_hosts[@]"
    localhost
)

zstyle ':completion:*:hosts' hosts $hosts
#  zstyle '*' hosts $hosts

# use generic completion system for programs not yet defined; (_gnu_generic works
# with commands that provide a --help option with "standard" gnu-like output.)
typeset -A programs

# list of programs for which need to provide parameters completion
programs=(
  cp 
  df 
  feh 
  fetchipac 
  head 
  hnb 
  ipacsum 
  mv 
  pal 
  stow 
  tail 
  uname 
  dmesg 
  hwclock
)

# set generic parameter completer
for compcom in ${programs}; do
      [[ -z ${_comps[$compcom]} ]] && compdef _gnu_generic ${compcom}
done; unset compcom

# handle command-not-found with pkgfile
[[ -e /usr/share/doc/pkgfile/command-not-found.zsh ]] && source /usr/share/doc/pkgfile/command-not-found.zsh
